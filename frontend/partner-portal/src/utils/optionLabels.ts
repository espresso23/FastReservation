/**
 * Option labels and default options for UI components
 */

/**
 * Default options for different parameter types
 */
export const defaultOptions: Record<string, string[]> = {
  establishment_type: ['HOTEL', 'RESTAURANT'],
  travel_companion: ['single', 'couple', 'family', 'friends', 'team', 'business'],
  amenities_priority: [
    'H·ªì b∆°i', 'Spa', 'B√£i ƒë·∫≠u xe', 'Gym', 'Buffet s√°ng', 'G·∫ßn bi·ªÉn', 'Wifi', 'L·ªÖ t√¢n 24/7', 'ƒê∆∞a ƒë√≥n s√¢n bay',
    'Pet-friendly', 'Ph√≤ng gia ƒë√¨nh', 'Kh√¥ng h√∫t thu·ªëc', 'B·ªìn t·∫Øm', 'View bi·ªÉn', 'View th√†nh ph·ªë', 'G·∫ßn trung t√¢m',
    'Ban c√¥ng', 'C·ª≠a s·ªï', 'Gi·∫∑t l√†', 'Thang m√°y', 'Romantic', 'Quiet', 'Lively', 'Luxury', 'Nature', 'Cozy', 'Modern', 'Classic'
  ],
  duration: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
  has_balcony: ['yes', 'no'],
  num_guests: ['single', 'couple', '3', '4', '5', '6', '7', '8', '9', '10']
}

/**
 * Price range options for quick selection
 */
export const priceRangeOptions = [
  { label: '100k - 300k', value: 300000 },
  { label: '500k - 1 tri·ªáu', value: 1000000 },
  { label: '1 - 2 tri·ªáu', value: 2000000 },
  { label: '2 - 3 tri·ªáu', value: 3000000 },
  { label: '3 - 5 tri·ªáu', value: 5000000 },
  { label: '5 tri·ªáu+', value: 10000000 }
]

/**
 * Get human-readable label for option value
 */
export const getOptionLabel = (key: string, value: string): string => {
  if (key === 'establishment_type') {
    if (value.toUpperCase() === 'HOTEL') return 'Kh√°ch s·∫°n'
    if (value.toUpperCase() === 'RESTAURANT') return 'Nh√† h√†ng'
  }
  
  if (key === 'travel_companion') {
    const m: Record<string, string> = { 
      single: 'M·ªôt m√¨nh', 
      couple: 'C·∫∑p ƒë√¥i', 
      family: 'Gia ƒë√¨nh', 
      friends: 'B·∫°n b√®',
      team: 'Nh√≥m',
      business: 'C√¥ng t√°c'
    }
    return m[value.toLowerCase()] || value
  }
  
  if (key === 'has_balcony') {
    if ((value || '').toLowerCase() === 'yes') return 'C√≥'
    if ((value || '').toLowerCase() === 'no') return 'Kh√¥ng'
  }
  
  return value
}

/**
 * Get emoji for establishment type
 */
export const getEstablishmentTypeEmoji = (type: string): string => {
  switch (type?.toUpperCase()) {
    case 'HOTEL': return 'üè®'
    case 'RESTAURANT': return 'üçΩÔ∏è'
    default: return 'üè¢'
  }
}

/**
 * Get emoji for travel companion
 */
export const getTravelCompanionEmoji = (companion: string): string => {
  switch (companion?.toLowerCase()) {
    case 'single': return 'üë§'
    case 'couple': return 'üë´'
    case 'family': return 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'
    case 'friends': return 'üë•'
    case 'team': return 'üë®‚Äçüë®‚Äçüë¶‚Äçüë¶'
    case 'business': return 'üíº'
    default: return 'üë•'
  }
}

/**
 * Get emoji for amenity
 */
export const getAmenityEmoji = (amenity: string): string => {
  const amenityMap: Record<string, string> = {
    'H·ªì b∆°i': 'üèä‚Äç‚ôÇÔ∏è',
    'Spa': 'üßò‚Äç‚ôÄÔ∏è',
    'B√£i ƒë·∫≠u xe': 'üöó',
    'Gym': 'üèÉ‚Äç‚ôÇÔ∏è',
    'Buffet s√°ng': 'üç≥',
    'G·∫ßn bi·ªÉn': 'üèñÔ∏è',
    'Wifi': 'üì∂',
    'L·ªÖ t√¢n 24/7': 'üè®',
    'ƒê∆∞a ƒë√≥n s√¢n bay': '‚úàÔ∏è',
    'Pet-friendly': 'üêï',
    'Ph√≤ng gia ƒë√¨nh': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    'Kh√¥ng h√∫t thu·ªëc': 'üö≠',
    'B·ªìn t·∫Øm': 'üõÅ',
    'View bi·ªÉn': 'üåä',
    'View th√†nh ph·ªë': 'üèôÔ∏è',
    'G·∫ßn trung t√¢m': 'üèõÔ∏è',
    'Ban c√¥ng': 'üåø',
    'C·ª≠a s·ªï': 'ü™ü',
    'Gi·∫∑t l√†': 'üëï',
    'Thang m√°y': 'üõó',
    'Romantic': 'üíï',
    'Quiet': 'ü§´',
    'Lively': 'üéâ',
    'Luxury': '‚ú®',
    'Nature': 'üåø',
    'Cozy': 'üè†',
    'Modern': 'üè¢',
    'Classic': 'üèõÔ∏è'
  }
  
  return amenityMap[amenity] || '‚ú®'
}

/**
 * Format price for display
 */
export const formatPrice = (price: number): string => {
  if (price >= 1000000) {
    return `${(price / 1000000).toFixed(1)}M`
  } else if (price >= 1000) {
    return `${(price / 1000).toFixed(0)}K`
  }
  return price.toString()
}

/**
 * Get budget category from price
 */
export const getBudgetCategory = (price: number): string => {
  if (price < 500000) return 'Ti·∫øt ki·ªám'
  if (price < 1000000) return 'B√¨nh d√¢n'
  if (price < 2000000) return 'Trung b√¨nh'
  if (price < 5000000) return 'Cao c·∫•p'
  return 'Luxury'
}

/**
 * Get duration category
 */
export const getDurationCategory = (duration: number): string => {
  if (duration === 1) return 'M·ªôt ƒë√™m'
  if (duration <= 3) return 'Ng·∫Øn ng√†y'
  if (duration <= 7) return 'Tu·∫ßn'
  return 'D√†i ng√†y'
}

/**
 * Get city emoji
 */
export const getCityEmoji = (city: string): string => {
  const cityMap: Record<string, string> = {
    'ƒê√† N·∫µng': 'üèñÔ∏è',
    'H√† N·ªôi': 'üèõÔ∏è',
    'H·ªì Ch√≠ Minh': 'üåÜ',
    'Nha Trang': 'üåä',
    'ƒê√† L·∫°t': 'üèîÔ∏è',
    'Ph√∫ Qu·ªëc': 'üèùÔ∏è',
    'H·ªôi An': 'üèÆ',
    'Sa Pa': '‚õ∞Ô∏è',
    'Hu·∫ø': 'üèõÔ∏è',
    'C·∫ßn Th∆°': 'üåæ'
  }
  
  return cityMap[city] || 'üèôÔ∏è'
}

/**
 * Get relevance score color
 */
export const getRelevanceScoreColor = (score: number): string => {
  if (score >= 0.8) return 'text-green-600'
  if (score >= 0.6) return 'text-yellow-600'
  if (score >= 0.4) return 'text-orange-600'
  return 'text-red-600'
}

/**
 * Get relevance score label
 */
export const getRelevanceScoreLabel = (score: number): string => {
  if (score >= 0.8) return 'R·∫•t ph√π h·ª£p'
  if (score >= 0.6) return 'Ph√π h·ª£p'
  if (score >= 0.4) return 'Kh√° ph√π h·ª£p'
  return '√çt ph√π h·ª£p'
}
